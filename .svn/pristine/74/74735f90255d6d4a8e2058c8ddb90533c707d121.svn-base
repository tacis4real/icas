namespace ICASStacks.DataManager.Migration
{
    using System;
    using System.Data.Entity.Migrations;
    
    public partial class migration1 : DbMigration
    {
        public override void Up()
        {
            CreateTable(
                "ICASDB.Bank",
                c => new
                    {
                        BankId = c.Int(nullable: false, identity: true),
                        Name = c.String(nullable: false, maxLength: 200, unicode: false),
                        Status = c.Boolean(nullable: false),
                        RegisteredBy = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.BankId);
            
            CreateTable(
                "ICASDB.ClientAccount",
                c => new
                    {
                        ClientAccountId = c.Long(nullable: false, identity: true),
                        ClientId = c.Long(nullable: false),
                        BankId = c.Int(nullable: false),
                        AccountName = c.String(nullable: false),
                        AccountNumber = c.String(nullable: false),
                        AccountTypeId = c.Int(nullable: false),
                        Status = c.Int(nullable: false),
                        TimeStampRegistered = c.String(nullable: false, maxLength: 35, unicode: false),
                        RegisteredByUserId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ClientAccountId)
                .ForeignKey("ICASDB.Bank", t => t.BankId, cascadeDelete: true)
                .Index(t => t.BankId);
            
            CreateTable(
                "dbo.BeneficiaryBiometric",
                c => new
                    {
                        BeneficiaryBiometricId = c.Long(nullable: false, identity: true),
                        BeneficiaryId = c.Long(nullable: false),
                        RightThumbPrintImage = c.String(),
                        RightIndexPrintImage = c.String(),
                        RightThumbPrintTemplate = c.Binary(),
                        RightIndexPrintTemplate = c.Binary(),
                    })
                .PrimaryKey(t => t.BeneficiaryBiometricId)
                .ForeignKey("dbo.Beneficiary", t => t.BeneficiaryId, cascadeDelete: true)
                .Index(t => t.BeneficiaryId);
            
            CreateTable(
                "dbo.Beneficiary",
                c => new
                    {
                        BeneficiaryId = c.Long(nullable: false, identity: true),
                        RecordId = c.Int(nullable: false),
                        ClientStationId = c.Int(nullable: false),
                        Surname = c.String(nullable: false, maxLength: 100),
                        FirstName = c.String(nullable: false, maxLength: 200),
                        Othernames = c.String(nullable: false, maxLength: 200),
                        DateOfBirth = c.DateTime(nullable: false),
                        MobileNumber = c.String(nullable: false, maxLength: 15),
                        ResidentialAddress = c.String(nullable: false, maxLength: 200),
                        OfficeAddress = c.String(maxLength: 200),
                        StateId = c.Int(nullable: false),
                        Sex = c.Int(nullable: false),
                        MaritalStatus = c.Int(nullable: false),
                        OccupationId = c.Int(nullable: false),
                        TimeStampRegistered = c.DateTime(nullable: false),
                        Status = c.Int(nullable: false),
                        TimeStampUploaded = c.DateTime(nullable: false),
                        UploadStatus = c.Int(nullable: false),
                        LocalArea_LocalAreaId = c.Int(),
                    })
                .PrimaryKey(t => t.BeneficiaryId)
                .ForeignKey("dbo.ClientStation", t => t.ClientStationId, cascadeDelete: true)
                .ForeignKey("dbo.LocalArea", t => t.LocalArea_LocalAreaId)
                .Index(t => t.ClientStationId)
                .Index(t => t.LocalArea_LocalAreaId);
            
            CreateTable(
                "dbo.ClientStation",
                c => new
                    {
                        ClientStationId = c.Int(nullable: false, identity: true),
                        StationName = c.String(nullable: false, maxLength: 150, unicode: false),
                        StationKey = c.String(nullable: false, maxLength: 15, unicode: false),
                        APIAccessKey = c.String(nullable: false, maxLength: 10, unicode: false),
                        DeviceId = c.String(maxLength: 50, unicode: false),
                        AssigneeFullName = c.String(nullable: false, maxLength: 150, unicode: false),
                        AssigneeMobileNumber = c.String(nullable: false, maxLength: 15, unicode: false),
                        LocalAreaId = c.Int(nullable: false),
                        DeviceIP = c.String(maxLength: 15, unicode: false),
                        Status = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ClientStationId)
                .ForeignKey("dbo.LocalArea", t => t.LocalAreaId, cascadeDelete: true)
                .Index(t => t.StationKey, unique: true, name: "IX_Station_Key")
                .Index(t => t.APIAccessKey, unique: true, name: "IX_APIAccessKey_Key")
                .Index(t => t.LocalAreaId);
            
            CreateTable(
                "dbo.LocalArea",
                c => new
                    {
                        LocalAreaId = c.Int(nullable: false),
                        StateId = c.Int(nullable: false),
                        Name = c.String(),
                        Status = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.LocalAreaId)
                .ForeignKey("dbo.State", t => t.StateId, cascadeDelete: true)
                .Index(t => t.StateId);
            
            CreateTable(
                "dbo.State",
                c => new
                    {
                        StateId = c.Int(nullable: false, identity: true),
                        Name = c.String(),
                    })
                .PrimaryKey(t => t.StateId);
            
            CreateTable(
                "ICASDB.ChurchCollectionType",
                c => new
                    {
                        ChurchCollectionTypeId = c.Int(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        CollectionTypes = c.String(unicode: false, storeType: "text"),
                        Status = c.Int(nullable: false),
                        TimeStampAdded = c.String(nullable: false, maxLength: 35, unicode: false),
                        AddedByUserId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ChurchCollectionTypeId)
                .ForeignKey("ICASDB.Church", t => t.ChurchId, cascadeDelete: true)
                .Index(t => t.ChurchId);
            
            CreateTable(
                "ICASDB.Church",
                c => new
                    {
                        ChurchId = c.Long(nullable: false, identity: true),
                        Name = c.String(nullable: false),
                        ShortName = c.String(nullable: false),
                        Founder = c.String(nullable: false),
                        PhoneNumber = c.String(nullable: false, maxLength: 15),
                        Email = c.String(maxLength: 100),
                        Address = c.String(nullable: false, maxLength: 200, unicode: false),
                        StateOfLocationId = c.Int(nullable: false),
                        TimeStampRegistered = c.String(nullable: false, maxLength: 35, unicode: false),
                        RegisteredByUserId = c.Int(nullable: false),
                        ChurchThemeSetting_ChurchThemeSettingId = c.Long(),
                    })
                .PrimaryKey(t => t.ChurchId)
                .ForeignKey("ICASDB.ChurchThemeSetting", t => t.ChurchThemeSetting_ChurchThemeSettingId)
                .Index(t => t.ChurchThemeSetting_ChurchThemeSettingId);
            
            CreateTable(
                "ICASDB.ChurchService",
                c => new
                    {
                        ChurchServiceId = c.Long(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        ServiceTypeDetail = c.String(unicode: false, storeType: "text"),
                        TimeStampAdded = c.String(nullable: false, maxLength: 35, unicode: false),
                        AddedByUserId = c.Int(nullable: false),
                        Status = c.Int(nullable: false),
                        ChurchServiceType_ChurchServiceTypeId = c.Int(),
                    })
                .PrimaryKey(t => t.ChurchServiceId)
                .ForeignKey("ICASDB.ChurchServiceType", t => t.ChurchServiceType_ChurchServiceTypeId)
                .ForeignKey("ICASDB.Church", t => t.ChurchId, cascadeDelete: true)
                .Index(t => t.ChurchId)
                .Index(t => t.ChurchServiceType_ChurchServiceTypeId);
            
            CreateTable(
                "ICASDB.ChurchServiceType",
                c => new
                    {
                        ChurchServiceTypeId = c.Int(nullable: false, identity: true),
                        Name = c.String(nullable: false),
                        SourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ChurchServiceTypeId);
            
            CreateTable(
                "ICASDB.ChurchServiceAttendance",
                c => new
                    {
                        ChurchServiceAttendanceId = c.Long(nullable: false, identity: true),
                        ClientChurchId = c.Long(nullable: false),
                        ChurchServiceTypeRefId = c.String(nullable: false),
                        ServiceTheme = c.String(maxLength: 8000, unicode: false),
                        BibleReadingText = c.String(maxLength: 8000, unicode: false),
                        Preacher = c.String(maxLength: 8000, unicode: false),
                        TotalAttendee = c.Long(nullable: false),
                        TotalCollection = c.Double(nullable: false),
                        ServiceAttendanceDetail = c.String(unicode: false, storeType: "text"),
                        DateServiceHeld = c.String(nullable: false, maxLength: 10, unicode: false),
                        TimeStampTaken = c.String(nullable: false, maxLength: 35, unicode: false),
                        TakenByUserId = c.Int(nullable: false),
                        ChurchServiceType_ChurchServiceTypeId = c.Int(),
                    })
                .PrimaryKey(t => t.ChurchServiceAttendanceId)
                .ForeignKey("ICASDB.ChurchServiceType", t => t.ChurchServiceType_ChurchServiceTypeId)
                .ForeignKey("ICASDB.ClientChurch", t => t.ClientChurchId, cascadeDelete: true)
                .Index(t => t.ClientChurchId)
                .Index(t => t.ChurchServiceType_ChurchServiceTypeId);
            
            CreateTable(
                "ICASDB.ClientChurch",
                c => new
                    {
                        ClientChurchId = c.Long(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        StructureChurchHeadQuarterParishId = c.String(),
                        Name = c.String(nullable: false),
                        Pastor = c.String(nullable: false),
                        Title = c.Int(nullable: false),
                        Sex = c.Int(nullable: false),
                        PhoneNumber = c.String(nullable: false, maxLength: 15),
                        Email = c.String(),
                        StateOfLocationId = c.Int(nullable: false),
                        AccountInfo = c.String(unicode: false, storeType: "text"),
                        ClientStructureChurchHeadQuarter = c.String(unicode: false, storeType: "text"),
                        Address = c.String(nullable: false, maxLength: 200, unicode: false),
                        ChurchReferenceNumber = c.String(nullable: false, maxLength: 20, unicode: false),
                        TimeStampRegistered = c.String(nullable: false, maxLength: 35, unicode: false),
                        RegisteredByUserId = c.Int(nullable: false),
                        ChurchStructureParishHeadQuarter_ChurchStructureParishHeadQuarterId = c.Long(),
                    })
                .PrimaryKey(t => t.ClientChurchId)
                .ForeignKey("ICASDB.Church", t => t.ChurchId, cascadeDelete: true)
                .ForeignKey("ICASDB.ChurchStructureParishHeadQuarter", t => t.ChurchStructureParishHeadQuarter_ChurchStructureParishHeadQuarterId)
                .Index(t => t.ChurchId)
                .Index(t => t.ChurchReferenceNumber, unique: true, name: "IX_Reg_ChurchRefNo")
                .Index(t => t.ChurchStructureParishHeadQuarter_ChurchStructureParishHeadQuarterId);
            
            CreateTable(
                "ICASDB.ChurchMember",
                c => new
                    {
                        ChurchMemberId = c.Long(nullable: false, identity: true),
                        ClientChurchId = c.Long(nullable: false),
                        FullName = c.String(nullable: false, maxLength: 200, unicode: false),
                        ProfessionId = c.Int(nullable: false),
                        ClientRoleInChurchId = c.Int(nullable: false),
                        Sex = c.Int(nullable: false),
                        Email = c.String(maxLength: 50),
                        MobileNumber = c.String(maxLength: 15, unicode: false),
                        Address = c.String(nullable: false, maxLength: 200, unicode: false),
                        DateJoined = c.String(nullable: false, maxLength: 10, unicode: false),
                        TimeStampUploaded = c.String(maxLength: 35),
                        TimeStampRegistered = c.String(nullable: false, maxLength: 35, unicode: false),
                        RegisteredByUserId = c.Int(nullable: false),
                        UploadStatus = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ChurchMemberId)
                .ForeignKey("ICASDB.ClientChurch", t => t.ClientChurchId, cascadeDelete: true)
                .ForeignKey("ICASDB.ClientRoleInChurch", t => t.ClientRoleInChurchId, cascadeDelete: true)
                .ForeignKey("ICASDB.Profession", t => t.ProfessionId, cascadeDelete: true)
                .Index(t => t.ClientChurchId)
                .Index(t => t.ProfessionId)
                .Index(t => t.ClientRoleInChurchId);
            
            CreateTable(
                "ICASDB.ClientRoleInChurch",
                c => new
                    {
                        ClientRoleInChurchId = c.Int(nullable: false, identity: true),
                        ClientChurchId = c.Long(nullable: false),
                        ChurchRoleTypeId = c.Int(nullable: false),
                        TimeStampAdded = c.String(nullable: false, maxLength: 35, unicode: false),
                        AddedByUserId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ClientRoleInChurchId)
                .ForeignKey("ICASDB.ChurchRoleType", t => t.ChurchRoleTypeId, cascadeDelete: true)
                .Index(t => t.ChurchRoleTypeId);
            
            CreateTable(
                "ICASDB.ChurchRoleType",
                c => new
                    {
                        ChurchRoleTypeId = c.Int(nullable: false, identity: true),
                        Name = c.String(nullable: false, maxLength: 250, unicode: false),
                        Description = c.String(maxLength: 250, unicode: false),
                        SourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ChurchRoleTypeId);
            
            CreateTable(
                "ICASDB.RoleInChurch",
                c => new
                    {
                        RoleInChurchId = c.Int(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        ChurchRoleTypeId = c.Int(nullable: false),
                        TimeStampAdded = c.String(nullable: false, maxLength: 35, unicode: false),
                        AddedByUserId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.RoleInChurchId)
                .ForeignKey("ICASDB.ChurchRoleType", t => t.ChurchRoleTypeId, cascadeDelete: true)
                .Index(t => t.ChurchRoleTypeId);
            
            CreateTable(
                "ICASDB.Profession",
                c => new
                    {
                        ProfessionId = c.Int(nullable: false, identity: true),
                        Name = c.String(nullable: false, maxLength: 250, unicode: false),
                        TimeStampAdded = c.String(nullable: false, maxLength: 35, unicode: false),
                        AddedByUserId = c.Int(nullable: false),
                        SourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ProfessionId);
            
            CreateTable(
                "ICASDB.ChurchStructureParishHeadQuarter",
                c => new
                    {
                        ChurchStructureParishHeadQuarterId = c.Long(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        ChurchStructureTypeId = c.Int(nullable: false),
                        StateOfLocationId = c.Int(nullable: false),
                        Parish = c.String(nullable: false, unicode: false, storeType: "text"),
                        TimeStampRegistered = c.String(nullable: false, maxLength: 35, unicode: false),
                        RegisteredByUserId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ChurchStructureParishHeadQuarterId)
                .ForeignKey("ICASDB.ChurchStructureType", t => t.ChurchStructureTypeId, cascadeDelete: true)
                .ForeignKey("ICASDB.StateOfLocation", t => t.StateOfLocationId, cascadeDelete: true)
                .ForeignKey("ICASDB.Church", t => t.ChurchId, cascadeDelete: true)
                .Index(t => t.ChurchId)
                .Index(t => t.ChurchStructureTypeId)
                .Index(t => t.StateOfLocationId);
            
            CreateTable(
                "ICASDB.ChurchStructureType",
                c => new
                    {
                        ChurchStructureTypeId = c.Int(nullable: false, identity: true),
                        Name = c.String(nullable: false),
                        Status = c.Int(nullable: false),
                        TimeStampRegistered = c.String(nullable: false, maxLength: 35, unicode: false),
                        RegisteredByUserId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ChurchStructureTypeId);
            
            CreateTable(
                "ICASDB.ChurchStructureHqtr",
                c => new
                    {
                        ChurchStructureHqtrId = c.Long(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        ClientId = c.Long(nullable: false),
                        ChurchStructureTypeId = c.Int(nullable: false),
                        StructureDetailId = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.ChurchStructureHqtrId)
                .ForeignKey("ICASDB.ChurchStructureType", t => t.ChurchStructureTypeId, cascadeDelete: true)
                .ForeignKey("ICASDB.Church", t => t.ChurchId, cascadeDelete: true)
                .Index(t => t.ChurchId)
                .Index(t => t.ChurchStructureTypeId);
            
            CreateTable(
                "ICASDB.ChurchStructure",
                c => new
                    {
                        ChurchStructureId = c.Long(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        ChurchStructureTypeDetail = c.String(unicode: false, storeType: "text"),
                        LastModificationTimeStamp = c.String(maxLength: 35, unicode: false),
                        LastModificationByUserId = c.Int(nullable: false),
                        Status = c.Int(nullable: false),
                        RegisteredByUserId = c.Int(nullable: false),
                        ChurchStructureType_ChurchStructureTypeId = c.Int(),
                    })
                .PrimaryKey(t => t.ChurchStructureId)
                .ForeignKey("ICASDB.Church", t => t.ChurchId, cascadeDelete: true)
                .ForeignKey("ICASDB.ChurchStructureType", t => t.ChurchStructureType_ChurchStructureTypeId)
                .Index(t => t.ChurchId)
                .Index(t => t.ChurchStructureType_ChurchStructureTypeId);
            
            CreateTable(
                "ICASDB.ClientChurchStructureDetail",
                c => new
                    {
                        ClientStructureChurchDetailId = c.Long(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        ClientId = c.Long(nullable: false),
                        StructureChurchId = c.Long(nullable: false),
                        ChurchStructureTypeId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ClientStructureChurchDetailId)
                .ForeignKey("ICASDB.ChurchStructureType", t => t.ChurchStructureTypeId, cascadeDelete: true)
                .ForeignKey("ICASDB.Client", t => t.ClientId, cascadeDelete: true)
                .Index(t => t.ClientId)
                .Index(t => t.ChurchStructureTypeId);
            
            CreateTable(
                "ICASDB.StructureChurch",
                c => new
                    {
                        StructureChurchId = c.Long(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        ChurchStructureTypeId = c.Int(nullable: false),
                        StateOfLocationId = c.Int(nullable: false),
                        Name = c.String(nullable: false),
                        TimeStampRegistered = c.String(nullable: false, maxLength: 35, unicode: false),
                        RegisteredByUserId = c.Int(nullable: false),
                        ChurchStructureHqtr_ChurchStructureHqtrId = c.Long(),
                        ClientStructureChurchDetail_ClientStructureChurchDetailId = c.Long(),
                    })
                .PrimaryKey(t => t.StructureChurchId)
                .ForeignKey("ICASDB.Church", t => t.ChurchId, cascadeDelete: true)
                .ForeignKey("ICASDB.ChurchStructureHqtr", t => t.ChurchStructureHqtr_ChurchStructureHqtrId)
                .ForeignKey("ICASDB.ChurchStructureType", t => t.ChurchStructureTypeId, cascadeDelete: true)
                .ForeignKey("ICASDB.ClientChurchStructureDetail", t => t.ClientStructureChurchDetail_ClientStructureChurchDetailId)
                .ForeignKey("ICASDB.StateOfLocation", t => t.StateOfLocationId, cascadeDelete: true)
                .Index(t => t.ChurchId)
                .Index(t => t.ChurchStructureTypeId)
                .Index(t => t.StateOfLocationId)
                .Index(t => t.ChurchStructureHqtr_ChurchStructureHqtrId)
                .Index(t => t.ClientStructureChurchDetail_ClientStructureChurchDetailId);
            
            CreateTable(
                "ICASDB.StateOfLocation",
                c => new
                    {
                        StateOfLocationId = c.Int(nullable: false, identity: true),
                        Name = c.String(),
                    })
                .PrimaryKey(t => t.StateOfLocationId);
            
            CreateTable(
                "ICASDB.ClientChurchService",
                c => new
                    {
                        ClientChurchServiceId = c.Long(nullable: false, identity: true),
                        ClientChurchId = c.Long(nullable: false),
                        ServiceTypeDetail = c.String(unicode: false, storeType: "text"),
                        TimeStampAdded = c.String(nullable: false, maxLength: 35, unicode: false),
                        AddedByUserId = c.Int(nullable: false),
                        Status = c.Int(nullable: false),
                        ChurchServiceType_ChurchServiceTypeId = c.Int(),
                    })
                .PrimaryKey(t => t.ClientChurchServiceId)
                .ForeignKey("ICASDB.ChurchServiceType", t => t.ChurchServiceType_ChurchServiceTypeId)
                .ForeignKey("ICASDB.ClientChurch", t => t.ClientChurchId, cascadeDelete: true)
                .Index(t => t.ClientChurchId)
                .Index(t => t.ChurchServiceType_ChurchServiceTypeId);
            
            CreateTable(
                "ICASDB.ChurchThemeSetting",
                c => new
                    {
                        ChurchThemeSettingId = c.Long(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        ThemeColor = c.String(nullable: false),
                        ThemeLogo = c.String(nullable: false),
                        ThemeLogoPath = c.String(nullable: false),
                        TimeStampRegistered = c.String(nullable: false, maxLength: 35, unicode: false),
                        RegisteredByUserId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ChurchThemeSettingId);
            
            CreateTable(
                "ICASDB.Client",
                c => new
                    {
                        ClientId = c.Long(nullable: false, identity: true),
                        ChurchId = c.Long(nullable: false),
                        StructureChurchHeadQuarterParishId = c.Long(),
                        Name = c.String(nullable: false),
                        Pastor = c.String(nullable: false),
                        Title = c.Int(nullable: false),
                        Sex = c.Int(nullable: false),
                        PhoneNumber = c.String(nullable: false, maxLength: 15),
                        Email = c.String(),
                        StateOfLocationId = c.Int(nullable: false),
                        ClientStructureChurchHeadQuarter = c.String(unicode: false, storeType: "text"),
                        Address = c.String(nullable: false, maxLength: 200, unicode: false),
                        ChurchReferenceNumber = c.String(nullable: false, maxLength: 20, unicode: false),
                        TimeStampRegistered = c.String(nullable: false, maxLength: 35, unicode: false),
                        RegisteredByUserId = c.Int(nullable: false),
                        Account_ClientAccountId = c.Long(),
                    })
                .PrimaryKey(t => t.ClientId)
                .ForeignKey("ICASDB.ClientAccount", t => t.Account_ClientAccountId)
                .ForeignKey("ICASDB.Church", t => t.ChurchId, cascadeDelete: true)
                .Index(t => t.ChurchId)
                .Index(t => t.ChurchReferenceNumber, unique: true, name: "IX_Reg_ChurchRefNo")
                .Index(t => t.Account_ClientAccountId);
            
            CreateTable(
                "dbo.ChurchServiceAttendanceRemittance",
                c => new
                    {
                        ChurchServiceAttendanceRemittanceId = c.Long(nullable: false, identity: true),
                        ClientId = c.Long(nullable: false),
                        From = c.String(),
                        To = c.String(),
                        TimeStampRemitted = c.String(nullable: false, maxLength: 35, unicode: false),
                        RemittedByUserId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.ChurchServiceAttendanceRemittanceId)
                .ForeignKey("ICASDB.Client", t => t.ClientId, cascadeDelete: true)
                .Index(t => t.ClientId);
            
            CreateTable(
                "ICASDB.ClientChurchCollectionType",
                c => new
                    {
                        ClientChurchCollectionTypeId = c.Long(nullable: false, identity: true),
                        ClientChurchId = c.Long(nullable: false),
                        CollectionTypes = c.String(unicode: false, storeType: "text"),
                        TimeStampAdded = c.String(nullable: false, maxLength: 35, unicode: false),
                        AddedByUserId = c.Int(nullable: false),
                        CollectionType_CollectionTypeId = c.Int(),
                    })
                .PrimaryKey(t => t.ClientChurchCollectionTypeId)
                .ForeignKey("ICASDB.CollectionType", t => t.CollectionType_CollectionTypeId)
                .Index(t => t.CollectionType_CollectionTypeId);
            
            CreateTable(
                "ICASDB.CollectionType",
                c => new
                    {
                        CollectionTypeId = c.Int(nullable: false, identity: true),
                        Name = c.String(nullable: false),
                        SourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.CollectionTypeId);
            
            CreateTable(
                "dbo.Role",
                c => new
                    {
                        RoleId = c.Int(nullable: false, identity: true),
                        Name = c.String(nullable: false, maxLength: 50),
                        Status = c.Boolean(nullable: false),
                    })
                .PrimaryKey(t => t.RoleId);

            CreateTable(
                "dbo.StaffUser",
                c => new
                {
                    StaffUserId = c.Int(nullable: false, identity: true),
                    UserProfileId = c.Int(nullable: false),
                    UserName = c.String(nullable: false, maxLength: 20),
                    Email = c.String(maxLength: 50),
                    IsFirstTimeLogin = c.Boolean(nullable: false),
                    FailedPasswordAttemptCount = c.Int(nullable: false),
                    IsApproved = c.Boolean(nullable: false),
                    IsLockedOut = c.Boolean(nullable: false),
                    LastLockedOutTimeStamp = c.String(maxLength: 35),
                    LastLoginTimeStamp = c.String(maxLength: 35),
                    LastPasswordChangedTimeStamp = c.String(maxLength: 35),
                    Password = c.String(nullable: false, maxLength: 50),
                    RegisteredDateTimeStamp = c.String(nullable: false, maxLength: 35),
                    RoleId = c.Int(nullable: false),
                    Salt = c.String(),
                    UserCode = c.String(),
                })
                .PrimaryKey(t => t.StaffUserId)
                .ForeignKey("dbo.Role", t => t.RoleId, cascadeDelete: true)
                //.ForeignKey("dbo.UserProfile", t => t.UserProfileId, cascadeDelete: true)
                .Index(t => t.UserProfileId)
                .Index(t => t.RoleId);

            CreateTable(
                "dbo.UserLoginTrail",
                c => new
                {
                    UserLoginTrailId = c.Int(nullable: false, identity: true),
                    LoginSource = c.String(nullable: false, maxLength: 20),
                    IsSuccessful = c.Boolean(nullable: false),
                    LoginTimeStamp = c.String(maxLength: 25),
                    UserProfileId = c.Int(nullable: false),
                    StaffUser_StaffUserId = c.Int(),
                })
                .PrimaryKey(t => t.UserLoginTrailId)
                //.ForeignKey("dbo.StaffUser", t => t.StaffUser_StaffUserId)
                .Index(t => t.StaffUser_StaffUserId);

            CreateTable(
                "dbo.UserProfile",
                c => new
                {
                    UserProfileId = c.Int(nullable: false, identity: true),
                    ClientStationId = c.Int(nullable: false),
                    ProfileNumber = c.String(nullable: false, maxLength: 10),
                    Surname = c.String(nullable: false, maxLength: 50),
                    FirstName = c.String(nullable: false, maxLength: 50),
                    OtherNames = c.String(),
                    Sex = c.Int(nullable: false),
                    ResidentialAddress = c.String(maxLength: 100),
                    Email = c.String(maxLength: 50),
                    MobileNumber = c.String(nullable: false, maxLength: 15),
                    DateLastModified = c.String(nullable: false, maxLength: 10),
                    TimeLastModified = c.String(nullable: false, maxLength: 15),
                    ModifiedBy = c.Int(nullable: false),
                    Status = c.Int(nullable: false),
                })
                .PrimaryKey(t => t.UserProfileId)
                //.ForeignKey("dbo.ClientStation", t => t.ClientStationId, cascadeDelete: true)
                .Index(t => t.ClientStationId);
            
            CreateTable(
                "dbo.StationReg",
                c => new
                    {
                        StationRegId = c.Long(nullable: false, identity: true),
                        StationName = c.String(nullable: false, maxLength: 150),
                        StationKey = c.String(nullable: false, maxLength: 15),
                        DeviceId = c.String(nullable: false, maxLength: 50),
                        DeviceIP = c.String(maxLength: 20),
                    })
                .PrimaryKey(t => t.StationRegId);
            
        }
        
        public override void Down()
        {
            DropForeignKey("dbo.StaffUser", "UserProfileId", "dbo.UserProfile");
            DropForeignKey("dbo.UserProfile", "ClientStationId", "dbo.ClientStation");
            DropForeignKey("dbo.UserLoginTrail", "StaffUser_StaffUserId", "dbo.StaffUser");
            DropForeignKey("dbo.StaffUser", "RoleId", "dbo.Role");
            DropForeignKey("ICASDB.ClientChurchCollectionType", "CollectionType_CollectionTypeId", "ICASDB.CollectionType");
            DropForeignKey("ICASDB.ClientChurchStructureDetail", "ClientId", "ICASDB.Client");
            DropForeignKey("dbo.ChurchServiceAttendanceRemittance", "ClientId", "ICASDB.Client");
            DropForeignKey("ICASDB.Client", "ChurchId", "ICASDB.Church");
            DropForeignKey("ICASDB.Client", "Account_ClientAccountId", "ICASDB.ClientAccount");
            DropForeignKey("ICASDB.Church", "ChurchThemeSetting_ChurchThemeSettingId", "ICASDB.ChurchThemeSetting");
            DropForeignKey("ICASDB.ChurchStructureParishHeadQuarter", "ChurchId", "ICASDB.Church");
            DropForeignKey("ICASDB.ChurchStructureHqtr", "ChurchId", "ICASDB.Church");
            DropForeignKey("ICASDB.ChurchService", "ChurchId", "ICASDB.Church");
            DropForeignKey("ICASDB.ChurchService", "ChurchServiceType_ChurchServiceTypeId", "ICASDB.ChurchServiceType");
            DropForeignKey("ICASDB.ClientChurchService", "ClientChurchId", "ICASDB.ClientChurch");
            DropForeignKey("ICASDB.ClientChurchService", "ChurchServiceType_ChurchServiceTypeId", "ICASDB.ChurchServiceType");
            DropForeignKey("ICASDB.ClientChurch", "ChurchStructureParishHeadQuarter_ChurchStructureParishHeadQuarterId", "ICASDB.ChurchStructureParishHeadQuarter");
            DropForeignKey("ICASDB.ChurchStructureParishHeadQuarter", "StateOfLocationId", "ICASDB.StateOfLocation");
            DropForeignKey("ICASDB.StructureChurch", "StateOfLocationId", "ICASDB.StateOfLocation");
            DropForeignKey("ICASDB.StructureChurch", "ClientStructureChurchDetail_ClientStructureChurchDetailId", "ICASDB.ClientChurchStructureDetail");
            DropForeignKey("ICASDB.StructureChurch", "ChurchStructureTypeId", "ICASDB.ChurchStructureType");
            DropForeignKey("ICASDB.StructureChurch", "ChurchStructureHqtr_ChurchStructureHqtrId", "ICASDB.ChurchStructureHqtr");
            DropForeignKey("ICASDB.StructureChurch", "ChurchId", "ICASDB.Church");
            DropForeignKey("ICASDB.ClientChurchStructureDetail", "ChurchStructureTypeId", "ICASDB.ChurchStructureType");
            DropForeignKey("ICASDB.ChurchStructure", "ChurchStructureType_ChurchStructureTypeId", "ICASDB.ChurchStructureType");
            DropForeignKey("ICASDB.ChurchStructure", "ChurchId", "ICASDB.Church");
            DropForeignKey("ICASDB.ChurchStructureParishHeadQuarter", "ChurchStructureTypeId", "ICASDB.ChurchStructureType");
            DropForeignKey("ICASDB.ChurchStructureHqtr", "ChurchStructureTypeId", "ICASDB.ChurchStructureType");
            DropForeignKey("ICASDB.ChurchServiceAttendance", "ClientChurchId", "ICASDB.ClientChurch");
            DropForeignKey("ICASDB.ChurchMember", "ProfessionId", "ICASDB.Profession");
            DropForeignKey("ICASDB.RoleInChurch", "ChurchRoleTypeId", "ICASDB.ChurchRoleType");
            DropForeignKey("ICASDB.ClientRoleInChurch", "ChurchRoleTypeId", "ICASDB.ChurchRoleType");
            DropForeignKey("ICASDB.ChurchMember", "ClientRoleInChurchId", "ICASDB.ClientRoleInChurch");
            DropForeignKey("ICASDB.ChurchMember", "ClientChurchId", "ICASDB.ClientChurch");
            DropForeignKey("ICASDB.ClientChurch", "ChurchId", "ICASDB.Church");
            DropForeignKey("ICASDB.ChurchServiceAttendance", "ChurchServiceType_ChurchServiceTypeId", "ICASDB.ChurchServiceType");
            DropForeignKey("ICASDB.ChurchCollectionType", "ChurchId", "ICASDB.Church");
            DropForeignKey("dbo.BeneficiaryBiometric", "BeneficiaryId", "dbo.Beneficiary");
            DropForeignKey("dbo.ClientStation", "LocalAreaId", "dbo.LocalArea");
            DropForeignKey("dbo.LocalArea", "StateId", "dbo.State");
            DropForeignKey("dbo.Beneficiary", "LocalArea_LocalAreaId", "dbo.LocalArea");
            DropForeignKey("dbo.Beneficiary", "ClientStationId", "dbo.ClientStation");
            DropForeignKey("ICASDB.ClientAccount", "BankId", "ICASDB.Bank");
            DropIndex("dbo.UserProfile", new[] { "ClientStationId" });
            DropIndex("dbo.UserLoginTrail", new[] { "StaffUser_StaffUserId" });
            DropIndex("dbo.StaffUser", new[] { "RoleId" });
            DropIndex("dbo.StaffUser", new[] { "UserProfileId" });
            DropIndex("ICASDB.ClientChurchCollectionType", new[] { "CollectionType_CollectionTypeId" });
            DropIndex("dbo.ChurchServiceAttendanceRemittance", new[] { "ClientId" });
            DropIndex("ICASDB.Client", new[] { "Account_ClientAccountId" });
            DropIndex("ICASDB.Client", "IX_Reg_ChurchRefNo");
            DropIndex("ICASDB.Client", new[] { "ChurchId" });
            DropIndex("ICASDB.ClientChurchService", new[] { "ChurchServiceType_ChurchServiceTypeId" });
            DropIndex("ICASDB.ClientChurchService", new[] { "ClientChurchId" });
            DropIndex("ICASDB.StructureChurch", new[] { "ClientStructureChurchDetail_ClientStructureChurchDetailId" });
            DropIndex("ICASDB.StructureChurch", new[] { "ChurchStructureHqtr_ChurchStructureHqtrId" });
            DropIndex("ICASDB.StructureChurch", new[] { "StateOfLocationId" });
            DropIndex("ICASDB.StructureChurch", new[] { "ChurchStructureTypeId" });
            DropIndex("ICASDB.StructureChurch", new[] { "ChurchId" });
            DropIndex("ICASDB.ClientChurchStructureDetail", new[] { "ChurchStructureTypeId" });
            DropIndex("ICASDB.ClientChurchStructureDetail", new[] { "ClientId" });
            DropIndex("ICASDB.ChurchStructure", new[] { "ChurchStructureType_ChurchStructureTypeId" });
            DropIndex("ICASDB.ChurchStructure", new[] { "ChurchId" });
            DropIndex("ICASDB.ChurchStructureHqtr", new[] { "ChurchStructureTypeId" });
            DropIndex("ICASDB.ChurchStructureHqtr", new[] { "ChurchId" });
            DropIndex("ICASDB.ChurchStructureParishHeadQuarter", new[] { "StateOfLocationId" });
            DropIndex("ICASDB.ChurchStructureParishHeadQuarter", new[] { "ChurchStructureTypeId" });
            DropIndex("ICASDB.ChurchStructureParishHeadQuarter", new[] { "ChurchId" });
            DropIndex("ICASDB.RoleInChurch", new[] { "ChurchRoleTypeId" });
            DropIndex("ICASDB.ClientRoleInChurch", new[] { "ChurchRoleTypeId" });
            DropIndex("ICASDB.ChurchMember", new[] { "ClientRoleInChurchId" });
            DropIndex("ICASDB.ChurchMember", new[] { "ProfessionId" });
            DropIndex("ICASDB.ChurchMember", new[] { "ClientChurchId" });
            DropIndex("ICASDB.ClientChurch", new[] { "ChurchStructureParishHeadQuarter_ChurchStructureParishHeadQuarterId" });
            DropIndex("ICASDB.ClientChurch", "IX_Reg_ChurchRefNo");
            DropIndex("ICASDB.ClientChurch", new[] { "ChurchId" });
            DropIndex("ICASDB.ChurchServiceAttendance", new[] { "ChurchServiceType_ChurchServiceTypeId" });
            DropIndex("ICASDB.ChurchServiceAttendance", new[] { "ClientChurchId" });
            DropIndex("ICASDB.ChurchService", new[] { "ChurchServiceType_ChurchServiceTypeId" });
            DropIndex("ICASDB.ChurchService", new[] { "ChurchId" });
            DropIndex("ICASDB.Church", new[] { "ChurchThemeSetting_ChurchThemeSettingId" });
            DropIndex("ICASDB.ChurchCollectionType", new[] { "ChurchId" });
            DropIndex("dbo.LocalArea", new[] { "StateId" });
            DropIndex("dbo.ClientStation", new[] { "LocalAreaId" });
            DropIndex("dbo.ClientStation", "IX_APIAccessKey_Key");
            DropIndex("dbo.ClientStation", "IX_Station_Key");
            DropIndex("dbo.Beneficiary", new[] { "LocalArea_LocalAreaId" });
            DropIndex("dbo.Beneficiary", new[] { "ClientStationId" });
            DropIndex("dbo.BeneficiaryBiometric", new[] { "BeneficiaryId" });
            DropIndex("ICASDB.ClientAccount", new[] { "BankId" });
            DropTable("dbo.StationReg");
            DropTable("dbo.UserProfile");
            DropTable("dbo.UserLoginTrail");
            DropTable("dbo.StaffUser");
            DropTable("dbo.Role");
            DropTable("ICASDB.CollectionType");
            DropTable("ICASDB.ClientChurchCollectionType");
            DropTable("dbo.ChurchServiceAttendanceRemittance");
            DropTable("ICASDB.Client");
            DropTable("ICASDB.ChurchThemeSetting");
            DropTable("ICASDB.ClientChurchService");
            DropTable("ICASDB.StateOfLocation");
            DropTable("ICASDB.StructureChurch");
            DropTable("ICASDB.ClientChurchStructureDetail");
            DropTable("ICASDB.ChurchStructure");
            DropTable("ICASDB.ChurchStructureHqtr");
            DropTable("ICASDB.ChurchStructureType");
            DropTable("ICASDB.ChurchStructureParishHeadQuarter");
            DropTable("ICASDB.Profession");
            DropTable("ICASDB.RoleInChurch");
            DropTable("ICASDB.ChurchRoleType");
            DropTable("ICASDB.ClientRoleInChurch");
            DropTable("ICASDB.ChurchMember");
            DropTable("ICASDB.ClientChurch");
            DropTable("ICASDB.ChurchServiceAttendance");
            DropTable("ICASDB.ChurchServiceType");
            DropTable("ICASDB.ChurchService");
            DropTable("ICASDB.Church");
            DropTable("ICASDB.ChurchCollectionType");
            DropTable("dbo.State");
            DropTable("dbo.LocalArea");
            DropTable("dbo.ClientStation");
            DropTable("dbo.Beneficiary");
            DropTable("dbo.BeneficiaryBiometric");
            DropTable("ICASDB.ClientAccount");
            DropTable("ICASDB.Bank");
        }
    }
}
